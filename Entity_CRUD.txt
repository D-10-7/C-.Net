using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp_Entity.Models
{
    public class Student
    {
        [Key]
        public int StudentId { get; set; }
        // write primary key after student else dbcontext class doesnt understand
        // or we'll have to write explicit (key ID)

        public string? FirstName { get; set; }
        public string? LastName { get; set; }

        public DateTime? DateOfBirth { get; set; }
        public float? Height { get; set; }
        public float? Weight { get; set; }

        //adding column
        public string? Photo {  get; set; }
        //build solution, then
        //go to tools/nudget/console>Add-Migration AddPhotoColumn
        //Addded column
        //console: Update-Database -Verbose
        //updated also. 


        public string? Hobby {  get; set; }
        //Another Column added. 


        //we want to remove a previous migration, by default it'll remove the last
        //but we want let's say second last so we have to:
        //update-database <name of migration>
        //Syntax-> Update-Database 20231107073709_AddPhotoColumn







        [ForeignKey("Grade")]
        public int? GradeId { get; set; }//Foreign key
        //even if you dont write it can get auto created but generally not good practice
        public Grade? Grade { get; set; }//no column created for Grade
        // to access grade
        public override string ToString()
        {
            return String.Format("{0},{1},{2},{3},{4},{5},{6}", FirstName, LastName, DateOfBirth, Height, Weight, Grade, Photo);
        }

    }
}

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp_Entity.Models
{
   public class Grade
    {
        [Key]
        public int Id {  get; set; }
        public string? GradeName { get; set; }
        public string? Section { get; set;}

        [ForeignKey("GradeId")]
        public IList<Student?> Students { get; set; } //for one to many relation. 
    }
}



using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Diagnostics.Metrics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static System.Net.Mime.MediaTypeNames;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace ConsoleApp_Entity.Models
{
    public class SchoolContext: DbContext //DbContext is a class provided by Entity Framework Core for working with databases.
                                          //has all methods like add update remove etc
    {
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        //It's used to configure the database connection settings for the SchoolContext
        //options builder- tool to set up and customize connection. 
        {
            optionsBuilder.UseSqlServer(@"Data Source = (localdb)\MSSQLLocalDB; Initial Catalog = master; Integrated Security = True;");
            //configures Entity Framework Core to use Microsoft SQL Server as the database provider
            //""->connection string for the SQL Server database.
        }

        public DbSet<Student> Student {  get; set; }//collection is created then
                                                    //dbcontext sends this to database as a table
        public  DbSet<Grade> Grade { get; set; }

    }
}



using ConsoleApp_Entity.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data.SqlTypes;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static System.Runtime.InteropServices.JavaScript.JSType;



namespace ConsoleApp_Entity
{
    internal class DbServices
    {
        private static readonly SchoolContext _db =new SchoolContext();
        
        public void display()
        {
            foreach(var r in _db.Student.ToList<Student>())
                Console.WriteLine(r);
        }

        public void Adddata(Student s)
        {
           
            _db.Add<Student>(s);//method inherited from db context
            _db.SaveChanges();

        }

        public List<Student> Customquery(string name)
        {
            FormattableString sql = $"SELECT * FROM Student WHERE FirstName ={name}";
            var studentlist = _db.Student.FromSql(sql).ToList();
            return studentlist;


        }

        public void Liqdemo()
        {
            var r = _db.Student.Join(_db.Grade, (sg) => sg.GradeId, (gi) => gi.Id, (r, g) => new { Name = r.FirstName, Gradename = g.GradeName });
            foreach (var result in r)
            {
                Console.Write(result.Gradename + " ");
                Console.WriteLine(result.Name);

            }

        }

            public void Delete(int id)
        {
            Student s= _db.Student.SingleOrDefault<Student>((S)=>S.StudentId==id);
                if (s!=null)
            {
                _db.Remove<Student>(s); 
                _db.SaveChanges();
            }
        }



        static void Main(string[] args)
        {
            DbServices dbServices = new DbServices();
            dbServices.display();
            //Student ss = new Student() { FirstName = "new222", LastName = "sha", DateOfBirth = new DateTime(2001, 12, 15, 0, 0, 0),Height = 5, Weight = 58 };
            //dbServices.Adddata(ss);
            //Console.WriteLine("---------After adding:---------");
            //dbServices.display();
            //Console.WriteLine("---------After deleting--------");
            //dbServices.Delete(9);
            //dbServices.display();

            dbServices.Liqdemo();
            //dbServices.display();
            List<Student> stu=dbServices.Customquery("Eren");
            foreach(Student s in stu)
            {
                Console.WriteLine($"Found= {s.FirstName}, {s.LastName}, {s.Grade},{s.DateOfBirth}");
            }


        }
    }
}
